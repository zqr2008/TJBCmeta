rm(list = ls())
library(tidyverse)
library(ggplot2)
library(umap)
library(pheatmap)
library(viridis)
library(sjmisc)
library(phateR)
library(reticulate)
library(sjmisc)
library(ggpubr)
library(rstatix)
library(phateR)
library(vegan)
set.seed(1234)

use_python("C:/Users/zqr20/AppData/Local/Programs/Python/Python311/python.exe")

setwd("C:/Users/zqr20/OneDrive - BGI Hong Kong Tech Co., Limited/文档/tjmeta/")
complete_phylo <- readRDS("C:/Users/zqr20/OneDrive - BGI Hong Kong Tech Co., Limited/文档/tjmeta/complete_phylo.rds")
otudata <- as.data.frame(complete_phylo@otu_table)
class(otudata) <- "data.frame"



metadata <- as.data.frame(complete_phylo@sam_data)
class(metadata) <- "data.frame"

metadata <- metadata %>%
  rownames_to_column("sampleid")


panlist <- c("Bifidobacterium_bifidum",
             "Bacteroides_fragilis",
             "Streptococcus_parasanguinis",
             "Streptococcus_salivarius",
             "Ruminococcus_gnavus",
             "Veillonella_atypica",
             "Veillonella_dispar",
             "Phocaeicola_vulgatus",
             "Roseburia_faecis",
             "Haemophilus_parainfluenzae",
             "Bacteroides_thetaiotaomicron",
             "Dysosmobacter_welbionis")




###############################################################
#Bifidobacterium_bifidum
###############################################################


generate_clean <- function(bacterianame){
  
  successmatrix <- read.delim(paste0("pan/successmatrix_",bacterianame), header=FALSE)
  successmatrix[1,] <- c("Uniref",successmatrix[1,])
  successmatrix[1,2] <- c("KEGG")
  colnames(successmatrix) <- successmatrix[1,]
  successmatrix <- successmatrix[-1,]

  cleanmatrix <- successmatrix %>%
    remove_rownames %>%
    dplyr::filter(Uniref != 0 & Uniref != 1 & str_detect(Uniref,"UNK")==FALSE) %>%
    column_to_rownames("Uniref") %>%
    dplyr::select(starts_with(bacterianame) | starts_with("bacteroides_vulgatus")) %>%
    rotate_df() %>%
    mutate(across(everything(.), ~ as.numeric(.))) %>%
    filter(rowSums(across(where(is.numeric)))!=0) %>%
    rownames_to_column("sampleid") %>%
    mutate(sampleid = str_split_fixed(sampleid,"_",n=3)[,3]) %>%
    mutate(sampleid = str_split_fixed(sampleid,"\\.",n=2)[,1])
  
  save(cleanmatrix,file = paste0("C:/Users/zqr20/OneDrive - BGI Hong Kong Tech Co., Limited/文档/tjmeta/panclean/",bacterianame,".rda"))
  return(cleanmatrix)
}


clean_to_phate <- function(cleanmatrix,name){
 
  cleanmatrix[is.na(cleanmatrix)] <- 0
  
  cleanmatrix <- cleanmatrix %>%
    left_join(metadata, by = "sampleid") %>%
    drop_na(trajcluster)
  
  data_phate <- phate(cleanmatrix[,c(2:(dim(cleanmatrix)[1]+1))])
  axis <- data_phate[["embedding"]]
  plotphate <- cbind(axis,cleanmatrix[,c(1,(dim(cleanmatrix)[1]+2):dim(cleanmatrix)[2])]) 
  
  plotphate$visit<- factor(plotphate$visit,levels = c("MG1","MG2","MG3","BM1.5","BM6","BM12","BM24","BM36"))
  
  save(plotphate,file = paste0("C:/Users/zqr20/OneDrive - BGI Hong Kong Tech Co., Limited/文档/tjmeta/panclean/",name,"phate.rda"))
  return(plotphate) 
}







PERMONVAloop <- function(bacterianame,cleanmatrix){
  store_result <- data.frame()
  
  cleanmatrix  <- cleanmatrix %>%
    column_to_rownames("sampleid") 
  
  distancematrix <- vegdist((cleanmatrix[,c(1:dim(cleanmatrix)[2])]), method="bray") 
  bray.distancematrix <- as.matrix(distancematrix)
  bray.distancematrix <- as.data.frame(bray.distancematrix)
  
  
  metadata.sub <- metadata %>%
    dplyr::filter(sampleid %in% rownames(bray.distancematrix)) %>%
    column_to_rownames("sampleid")
  
  counter = 1
  for (i in c("mother","offspring","all")){
    
    
    if (i == "all"){
      metadata.select <- metadata.sub
    }
    else{
  metadata.select <- metadata.sub %>%
      filter(type == i)
    }
  covert.species <- bray.distancematrix[colnames(bray.distancematrix) %in% rownames(metadata.select),
                                                 rownames(bray.distancematrix) %in% rownames(metadata.select)]
  
  
  metadata.select <- metadata.select[match(rownames(covert.species), rownames(metadata.select)),]
  
  n <-  metadata.select[,"trajcluster"]
  
  if (length(unique(n))<2){
    next
  }
  a = adonis(covert.species~n,permutations = 1500,method = "bray")
  store_result[counter,1] = bacterianame
  store_result[counter,2] = i
  store_result[counter,3] = a$aov.tab[1,5]
  store_result[counter,4] = a$aov.tab[1,6]
  counter = counter + 1
}
  return(store_result)
}



storeall <- data.frame()

for (i in panlist){
  cleanmatrix <- generate_clean(i)
  temp <- PERMONVAloop(i,cleanmatrix)
  storeall <- rbind(storeall,temp)
}

save(storeall,file="C:/Users/zqr20/OneDrive - BGI Hong Kong Tech Co., Limited/文档/tjmeta/panclean/storeall.rda")
write.table(storeall,file = "C:/Users/zqr20/OneDrive - BGI Hong Kong Tech Co., Limited/文档/tjmeta/panclean/storeall.csv",sep = ",",
            fileEncoding = "GBK",row.names = F,col.names = F)



load("C:/Users/zqr20/OneDrive - BGI Hong Kong Tech Co., Limited/文档/tjmeta/panclean/storeall.rda")
plotphatemap <- function(plotphate,name,subsettype,pvaluedf){
  
  if (subsettype == "all"){
    plotphate <- plotphate
  }
  else{
    plotphate <- plotphate %>%
      filter(type == subsettype)
  }
  
  pvalue <- pvaluedf %>%
    filter(V1 == name & V2 == subsettype)
  
  
  plotphate %>%
    ggplot(aes( x = PHATE1 ,y = PHATE2, color = trajcluster)) +
    geom_point(size = 1.5) +
    ggtitle(label = paste0(str_replace(name,"_"," ")," for ",subsettype),
            subtitle = paste0("P = ",round(pvalue[1,4],3)))+
    theme_classic()+
    xlab(paste0("PHATE 1 (N=",dim(plotphate)[1],")")) +
    ylab("PHATE 2") +
    stat_ellipse(lwd = 0.8)+
    theme_classic()+
    scale_color_manual(values = c("#e95280","#23b1a5","#E49B0F")) +
    theme (plot.title = element_text (size = 14, face = "bold" ))+
    theme(axis.text=element_text(size=16,face="bold", color = "black"), 
          axis.title=element_text(size=16,face="bold"), 
          legend.text = element_text(size=18,face="bold"), 
          legend.title = element_text(size=18,face="bold"), 
          plot.title = element_text(size=20, face="italic", hjust = 0.5),
          plot.subtitle=element_text(size=20,face="bold", color="black"),
          axis.text.x = element_text(size=20,face="bold",hjust = -0.01))+
    labs(color="Trajectory")
  
  ggsave(paste0("C:/Users/zqr20/OneDrive - BGI Hong Kong Tech Co., Limited/文档/tjmeta/panclean/","Figure",name,"_",subsettype,".pdf"),width = 7, height = 6)
}


for (i in panlist){
  cleanmatrix <- generate_clean(i)
  plotphate <- clean_to_phate(cleanmatrix,i)
  for (jj in c("mother","offspring","all")){
  plotphatemap(plotphate,i,jj,storeall)
  }
  }
